@model GovUk.Education.SearchAndCompare.UI.Shared.ViewModels.CourseDetailsViewModel;

@using GovUk.Education.SearchAndCompare.Domain.Models;
@using GovUk.Education.SearchAndCompare.Domain.Models.Enums;
@using GovUk.Education.SearchAndCompare.UI.Shared.ViewFormatters;
@using GovUk.Education.SearchAndCompare.UI.Shared.ViewModels;

@{
  ViewBag.Title = $"{Model.Course.Name} at {Model.Provider.Name}";
}

<div data-module="back-link"></div>

@if (Model.PreviewMode)
{
  <div class="preview-banner">
    This is a preview of a course: @Model.Course.Name (@Model.Course.ProgrammeCode).
  </div>
}

<main class="govuk-main-wrapper" id="main-content" role="main">
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
      <h1 class="govuk-heading-xl">
        @Model.Course.Name at @Model.Provider.Name

        @if (!String.IsNullOrEmpty(Model.Course.AccreditingProvider?.Name))
        {
          <span class="govuk-caption-xl">Accredited provider: @Model.Course.AccreditingProvider?.Name</span>
        }
      </h1>

      <div class="course-basicinfo govuk-!-margin-bottom-8">
        <dl class="govuk-list--description">
          @if(!string.IsNullOrEmpty(Model.Course.Mod) && Model.Course.Mod.Length > 1)
          {
            <dt class="govuk-list--description__label">Course offered</dt>
            <dd>@Model.Course.Mod</dd>
          }
          @if (Model.Course.ProviderLocation != null)
          {
            <dt class="govuk-list--description__label">Location</dt>
            <dd>@Model.Course.ProviderLocation.Address</dd>
          }
          <dt class="govuk-list--description__label">Qualification</dt>
          <dd>
            @await Html.PartialAsync("_Qualification.cshtml")
          </dd>
          @if (!string.IsNullOrEmpty(Model.Course.Duration)) {
            <dt class="govuk-list--description__label">Course length</dt>
            <dd>@Model.Course.Duration</dd>
          }
          @if (!string.IsNullOrEmpty(@Model.Course.FormattedEarliestApplicationDate())) {
            <dt class="govuk-list--description__label">Date you can apply from</dt>
            <dd>@Model.Course.FormattedEarliestApplicationDate()</dd>
          }
          @if (!string.IsNullOrEmpty(@Model.Course.FormattedStartDate())) {
            <dt class="govuk-list--description__label">Date course starts</dt>
            <dd>@Model.Course.FormattedStartDate()</dd>
          }
          @if (!string.IsNullOrEmpty(@Model.Course.ContactDetails.Website)) {
            <dt class="govuk-list--description__label">Website</dt>
            <dd>
              <a href="@Model.Course.FormattedWebsite()" title="Go to course website" aria-label="Go to course website" class="govuk-link">@Model.Course.FormattedWebsite()</a>
            </dd>
          }
        </dl>
      </div>
    </div>
  </div>

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      <div class="course-contents govuk-!-margin-bottom-8">
        <h2 class="govuk-heading-m">Contents</h2>
          <ul class="govuk-list govuk-list--dash">
            @if (Model.PreviewMode || Model.HasSection(CourseDetailsSections.AboutTheCourse))
            {
              <li><a href="#section-about">About the course</a></li>
            }
            @if (Model.HasSection(CourseDetailsSections.InterviewProcess))
            {
              <li><a href="#section-interviews">Interview process</a></li>
            }
            @if (Model.PreviewMode || Model.HasSection(CourseDetailsSections.AboutSchools))
            {
              <li><a href="#section-schools">How school placements work</a></li>
            }
            @if(Model.Course.IsSalaried)
            {
              @if (Model.PreviewMode || Model.HasSection(CourseDetailsSections.AboutSalary))
              {
                <li><a href="#section-salary">Salary</a></li>
              }
            }
            else
            {
              @if (Model.PreviewMode || Model.HasSection(CourseDetailsSections.AboutFees))
              {
                <li><a href="#section-fees">Fees</a></li>
              }
            }
            <li><a href="#section-financial-support">Financial support</a></li>
            @if (Model.PreviewMode || Model.HasSection(CourseDetailsSections.EntryRequirementsQualifications))
            {
              <li><a href="#section-entry">Requirements</a></li>
            }
            @if (Model.PreviewMode || Model.HasSection(CourseDetailsSections.AboutTheProvider))
            {
              <li><a href="#section-about-provider">About the training provider</a></li>
            }

            @if (Model.PreviewMode || Model.HasSection(CourseDetailsSections.TrainWithDisabilities))
            {
              <li><a href="#section-train-with-disabilities">Training with disabilities and other needs</a></li>
            }

            @if (Model.HasContactDetails())
            {
              <li><a href="#section-contact">Contact details</a></li>
            }
            <li><a href="#section-apply">Apply</a></li>
          </ul>
        </div>

        @await Html.PartialAsync("_AboutCourse.cshtml")

        @await Html.PartialAsync("_InterviewProcess.cshtml")

        @await Html.PartialAsync("_AboutSchools.cshtml")

        @if (Model.Course.IsSalaried)
        {
          @await Html.PartialAsync("_Salary.cshtml")
        }
        else
        {
          @await Html.PartialAsync("_Fees.cshtml")
        }

        @await Html.PartialAsync("_FinancialSupport.cshtml")

        @await Html.PartialAsync("_EntryRequirementsQualifications.cshtml")

        @await Html.PartialAsync("_AboutTheProvider.cshtml")

        @await Html.PartialAsync("_TrainWithDisabilities.cshtml")

        @await Html.PartialAsync("_ContactDetails.cshtml")

        @await Html.PartialAsync("_Apply.cshtml")

        @await Html.PartialAsync("_Advice.cshtml")

    </div>
  </div>
</main>
