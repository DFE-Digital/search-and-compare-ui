@model ResultsViewModel

@{
  var mapModel = Model.Map;
}

<div class="govuk-grid-row">
  <div class="govuk-grid-column-one-half">
    <p class="govuk-body search-results__count">@string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:n0}", @mapModel.CourseGroups.Count()) courses found</p>
  </div>
  <div class="govuk-grid-column-one-half">
    <p class="govuk-body search-results__new-search">
      <a href='@Url.Action("LocationWizard", "Filter")' class="govuk-link">New search</a>
    </p>
  </div>
</div>

@Html.Partial("SortBy", Model)

<div class="resultsmap" style="position: relative;">
  <div style="height: @(mapModel.Map.Height)px;" id="map"></div>
  <script>
    var map;
    function initMap() {
      function createClickableMarker(map, label, position, href, icon) {
        var marker = new google.maps.Marker({
          map: map,
          label: label,
          position: position,
          icon: icon
        });
        marker.addListener('click', function () { window.location = href; });
        return marker;
      }

      var mapElement = document.getElementById('map');

      map = new google.maps.Map(mapElement, {
        center: {
          lat: @(mapModel.Map.Centre.Latitude),
          lng: @(mapModel.Map.Centre.Longitude)
        },
        zoom: @(mapModel.Map.ZoomLevel),
        mapTypeControl: false,
        scaleControl: false,
        streetViewControl: false,
        rotateControl: false,
        fullscreenControl: false
      });

      var meMarker = createClickableMarker(map, '',
        {
          lat: @(mapModel.Map.MyLocation.Latitude),
          lng: @(mapModel.Map.MyLocation.Longitude)
        },
        '@Html.Raw(@Url.Action("Location", "Filter", Model.FilterModel.ToRouteValues()))',
        '/images/maps/green_Marker_dot.png'
      );

      var markers = [
        @foreach (var courseGroup in Model.Map.CourseGroups) {
          <text>
            createClickableMarker(
              map,
              '@(courseGroup.Area.Label)', {
                lat: @(courseGroup.Coordinates.Latitude),
                lng: @(courseGroup.Coordinates.Longitude)
              },
              '#@(courseGroup.Area.Href)'
            ),
          </text>
        }
      ];
    }
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDu77ygF-I0m6ya86NO5Dl0KG2J_C6O6Gg&callback=initMap" async defer></script>
</div>

<ul class="govuk-list search-results">
  @foreach (var courseGroup in mapModel.CourseGroups) {
    <li id="@(courseGroup.Area.Href)">
      <h3 class="govuk-heading-m">
        @courseGroup.Courses.First().Provider.Name
      </h3>
      <dl class="govuk-list--description">
        @if (@courseGroup.Courses.First().Distance != null) {
          <dt class="govuk-list--description__label">Distance</dt>
          <dd>@courseGroup.Courses.First().Distance.FormattedDistance()</dd>
        }
        @if (@courseGroup.Courses.First().ProviderLocation != null) {
          <dt class="govuk-list--description__label">Address</dt>
          <dd>@courseGroup.Courses.First().ProviderLocation.Address</dd>
        }
        @foreach (var course in courseGroup.Courses) {
          <dt class="govuk-list--description__label">Course Name</dt>
          <dd>
            <a href='@Url.Action("Index", "Course", RoutingUtil.Combine(Model.FilterModel.ToRouteValues(), new {courseCode = course.ProgrammeCode, providerCode = course.Provider.ProviderCode}))' class="link">
              @course.Name
            </a>
          </dd>
        }
      </dl>
    </li>
  }
</ul>
