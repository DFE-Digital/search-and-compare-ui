@model ResultsViewModel

@{
  var mapModel = Model.Map;
}

<div class="govuk-grid-row">
  <div class="govuk-grid-column-one-half">
    <p class="govuk-body search-results__count">@string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:n0}", @mapModel.CourseGroups.Count()) courses found</p>
  </div>
  <div class="govuk-grid-column-one-half">
    <p class="govuk-body search-results__new-search">
      <a href='@Url.Action("LocationWizard", "Filter")' class="govuk-link">New search</a>
    </p>
  </div>
</div>

@await Html.PartialAsync("SortBy", Model)

<div class="search-results-map" style="position: relative;">
  <div style="height: @(mapModel.Map.Height)px;" id="map"></div>
</div>

<ul class="govuk-list govuk-list--courses search-results">
  @foreach (var courseGroup in mapModel.CourseGroups) {
    <li>
      <h3 class="govuk-heading-m">
        @courseGroup.Courses.First().Provider.Name
      </h3>
      <dl class="govuk-list--description">
        @if (@courseGroup.Courses.First().Distance != null) {
          <dt class="govuk-list--description__label">Distance</dt>
          <dd>
            @courseGroup.Courses.First().Distance.FormattedDistance()
            <span class="govuk-list--description__hint">
              to the training provider or their nearest training location
            </span>
          </dd>
          <dt class="govuk-list--description__label">Address</dt>
          <dd>
            @courseGroup.Courses.First().DistanceAddress.Replace("\n", ", ")
          </dd>
        }
      </dl>
      @if(courseGroup.Courses.Count() > 1)
      {
        <h4 class="govuk-heading-s govuk-!-margin-0">@courseGroup.Courses.Count() courses</h4>
      }

      <ul class="govuk-list govuk-list--courses">
        @foreach (var course in courseGroup.Courses) {
          <li>
            <a href='@(Url.Action("Index", "Course", new {courseCode = course.ProgrammeCode, providerCode = course.Provider.ProviderCode}))' class="govuk-link">
              @course.Name
              (@course.Mod)
            </a>
          </li>
        }
      </ul>
    </li>
  }
</ul>

<script>
  window.search_location = [{
    "lat": @(mapModel.Map.MyLocation.Latitude),
    "lng": @(mapModel.Map.MyLocation.Longitude)
  }]

  window.locations = [
    @foreach (var courseGroup in Model.Map.CourseGroups)
    {
      <text>
        {
          "title": "@(courseGroup.Courses.First().Provider.Name)",
          "lat": "@(courseGroup.Coordinates.Latitude)",
          "lng": "@(courseGroup.Coordinates.Longitude)",
          "no_of_courses": @(courseGroup.Courses.Count()),
          "distance": "@(courseGroup.Courses.First().Distance.FormattedDistance())",
          "courses":
          [
            @foreach (var course in courseGroup.Courses)
            {
              <text>
                {
                  "name": "@(course.Name)",
                  "code": "@(course.ProgrammeCode)",
                  "qual": "@(course.Mod)",
                  "url": "@(Url.Action("Index", "Course", new {courseCode = course.ProgrammeCode, providerCode = course.Provider.ProviderCode}))"
                },
              </text>
            }
          ]
        },
      </text>
    }
  ]

  window.training_locations = [
    @foreach (var item in Model.Courses.Items) {
      <text>
        {
          "title": "@item.Name with @item.Provider.Name",
          "lat": "",
          "lng": "",
          "no_of_courses": 0,
           "distance": "@courseGroup.Courses.First().Distance.FormattedDistance()",
        },
      </text>
    }
  ]
</script>
