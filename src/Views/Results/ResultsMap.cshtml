@using GovUk.Education.SearchAndCompare.UI.Controllers
@model ResultsViewModel

@{
  ViewBag.HideFooter = true;
  Layout = "~/Views/Shared/_Layout.cshtml";

  var mapModel = Model.MapViewModel;

  ViewBag.Title =
    (Model.Courses != null && Model.Courses.TotalCount > 0
    ? $"{string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:n0}", Model.Courses.TotalCount)} courses"
    : "No courses found")
    + (string.IsNullOrWhiteSpace(Model.FilterModel.query) ? "" : $" - {Model.FilterModel.query}");

  ViewData["bodyClasses"] = "map-results";
}

@section bodyEnd {
  <script src="https://maps.googleapis.com/maps/api/js?key=@(Environment.GetEnvironmentVariable("google_cloud_platform_key_maps"))&callback=initGoogleMaps" async defer></script>
}

<main id="main-content" role="main">
  <div class="map-results__container">
    <div class="map-results__map">
      @if (Model.Courses == null || Model.Courses.TotalCount == 0) {
        @await Html.PartialAsync("Display/Empty")
        @await Component.InvokeAsync("SuggestedSearch", new { original = Model, maxResult = 2})
      } else {
        @await Html.PartialAsync("Display/Map")
      }
    </div>
    <div class="map-results__sidebar">
      <aside>
        @if (string.IsNullOrWhiteSpace(Model.FilterModel.query))
        {
          <h1 class="govuk-heading-m">Teacher training courses near <text>@Model.FilterModel.loc</text></h1>
        }
        else
        {
          <h1 class="govuk-heading-m">
            <span class="govuk-caption-m">Teacher training courses</span>
            @Model.FilterModel.query
          </h1>
        }

        <p class="govuk-body">
          @string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:n0}", @Model.Courses.TotalCount) courses found within <text>@Model.FilterModel.rad</text> miles
        </p>

        <ul class="govuk-list govuk-!-margin-bottom-5">
          <li>
            <a href="@Url.Action("Index", "Results", RoutingUtil.Combine(Model.FilterModel.ToRouteValues(), new { display = "list" }))" class="govuk-link">View results as a list</a>
          </li>
          <li>
            <a href='@Url.Action("LocationWizard", "Filter")' class="govuk-link">New search</a>
          </li>
        </ul>

        <div class="govuk-toggle" data-module="toggle">
          <button class="govuk-toggle__link js-toggle" aria-expanded="false" aria-controls="searchFilters">
            Filter the results
          </button>
          <div class="govuk-toggle__target" id="searchFilters">
            @if (!string.IsNullOrWhiteSpace(Model.FilterModel.query)) {
              @await Html.PartialAsync("Filters/Query", Model.FilterModel)
            } else {
              @await Html.PartialAsync("Filters/Location", Model.FilterModel)
            }
            @await Html.PartialAsync("Filters/Subject", Model)
            @await Html.PartialAsync("Filters/StudyType", Model.FilterModel)
            @await Html.PartialAsync("Filters/Qualification", Model.FilterModel)
            @await Html.PartialAsync("Filters/Funding", Model.FilterModel)
          </div>
        </div>
        <ul class="govuk-list search-results">
          @foreach (var item in Model.Courses.Items) {
            var subjects = @item.CourseSubjects.Select(courseSubject => courseSubject.Subject.Name).ToArray();

            <li>
              <h3 class="govuk-heading-s">
                <a href='@Url.Action("Index", "Course", new {courseCode = item.ProgrammeCode, providerCode = item.Provider.ProviderCode})' class="link">@item.Name with @item.Provider.Name</a>
              </h3>
              <dl class="govuk-list--description">
                @if (item.Distance != null) {
                  <dt class="govuk-list--description__label">Distance</dt>
                  <dd>
                    @item.Distance.FormattedDistance()
                  </dd>
                }
                @if(!string.IsNullOrEmpty(item.Mod) && item.Mod.Length > 1)
                {
                  <dt class="govuk-list--description__label">Course offered</dt>
                  <dd>@item.Mod</dd>
                }
                <dt class="govuk-list--description__label">Financial support</dt>
                <dd>@item.FundingOptions()</dd>
              </dl>
            </li>
          }
        </ul>
        @await Html.PartialAsync("Pagination", Model)
      </aside>
      <div class="map-results__footer">
        @await Html.PartialAsync("_Footer")
      </div>
    </div>
  </div>
</main>

<script>
  window.mapSettings = {
    "search_lat": @(mapModel.MapProjection.MyLocation.Latitude),
    "search_lng": @(mapModel.MapProjection.MyLocation.Longitude),
    "zoom": @(Model.FilterModel.rad)
  }

  window.locations = [
  @{
      var pins = Model.MapViewModel.MapProjection.Markers.OfType<CourseMapPin>();
      var locationGroups = pins.GroupBy(pin => pin.Location, pin => pin);
  }
    @foreach (var locationGroup in locationGroups)
    {
        var location = locationGroup.Key;
      <text>
        {
          //"title": "todo",
          "lat": "@location.Latitude",
          "lng": "@location.Longitude",
          "no_of_courses": @locationGroup.Count(),
          //"distance": "todo",
          "courses":
          [
              @foreach(var pin in locationGroup)
              {
                  var course = pin.Course;
                  <text>
                    {
                      "name": "@(course.Name)",
                      "code": "@(course.ProgrammeCode)",
                      "qual": "@(course.Mod)",
                      "url": "@(Url.Action("Index", "Course", new {courseCode = course.ProgrammeCode, providerCode = course.Provider.ProviderCode}))"
                    },
                  </text>
              }
          ]
        },
      </text>
    }
  ]
</script>
